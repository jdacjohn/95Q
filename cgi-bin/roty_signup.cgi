#!/usr/bin/perl -T
# $Author: Jarnold $
# $Date: 3/09/06 6:28p $
# $Revision: 5 $

use strict;
use lib '.';
use CGI;
use DBI;
use HTML::Template;
use HTML::Entities qw(encode_entities);
use Nine5Q::Conf;
use Nine5Q::Verify;
use Image::Size;
#use Imager;
use File::Copy;
use Fcntl ':flock';
use CGI::Carp 'fatalsToBrowser';

my $C = new Nine5Q::Conf;
my $Q = new CGI;
my %F = $Q->Vars();
my $sth;
my $contest = 'roty';
our $DEBUG = 0;
our $DEBUG_INIT = 0;

my $NOTICE_ADDR = 'kidcruzlive@gmail.com,jarnold@2k3technologies.com';
my $SENDMAIL    = '/usr/sbin/sendmail';

$C->encode_html(\%F);

my %modes = (
  'enter'=>\&do_enter,
  'modify'=>\&do_modify,
  'delete'=>\&do_delete,
  'view'=>\&do_view,
  'default'=>\&show_signup
);
delete @ENV{qw(PATH IFS CDPATH ENV BASH_ENV)};
if(defined($F{'mode'}) && exists($modes{$F{mode}})) {
  $modes{$F{'mode'}}->();
}
else {
  $modes{'default'}->();
}

$Nine5Q::Conf::DBH->disconnect() if $Nine5Q::Conf::DBH;
exit;

#------------------------------------------------------------------------------
# Display operational success message
#------------------------------------------------------------------------------
sub show_success {
  my $template = $C->tmpl('roty_submit_confirm');
  $template->param(cgiRoot=>$C->cgi_root());
  $template->param(siteRoot=>$C->site_root());
  print $Q->header(-type=>'text/html');
  print $template->output;
}

#------------------------------------------------------------------------------
# Display operational success message
#------------------------------------------------------------------------------
sub show_error {
  my $msg = shift;
  my $template = $C->tmpl('error_user');
  $template->param(msg=>$msg) if $msg;
  print $Q->header(-type=>'text/html');
  print $template->output;
  exit;
}
#------------------------------------------------------------------------------
# Display signup page
#------------------------------------------------------------------------------
sub show_signup {
  my $error = shift;
  my $template = $C->tmpl('roty_signup');
  $template->param(%$error) if $error;
  $template->param(siteRoot=>$C->site_root());
  $template->param(cgiRoot=>$C->cgi_root());
  print $Q->header(-type=>'text/html');
  print $template->output;
  exit;
}

#------------------------------------------------------------------------------
# Set up the parameters for the submit entry.
# Change History:
# 1. 03.09.2006:  -  Initial Version - jarnold
#------------------------------------------------------------------------------
sub do_enter {

  unless($ENV{'REQUEST_METHOD'} eq 'POST') {
    show_signup();
  }
  else {
    my %error = ();

    # first deal with the photo.
    my $filename = $Q->param('photo');
    my $fh = $Q->upload('photo');
    my ($size_x,$size_y,$type);
    my $photo_ext;
		$filename =~ s/\s/_/g;
    if(defined($fh)) {
      ($size_x,$size_y,$type) = imgsize($fh);
      if(uc($type) =~ /^(JPG|GIF|PNG)$/) {
        $photo_ext = lc($1);
        $filename =~ s#.$photo_ext##;
        $filename .= time();
      }
      else {
        $error{photo_error} = "Wrong photo type. Photos must be in JPEG (.jpg), GIF (.gif), or PNG (.png) format";
      }
    } else {
      $error{photo_error} = "You must select a photo to upload";
    }

    debug('Full filename = ' . $filename . '<br />');
    debug('File extension = ' . $photo_ext . '<br />');
    unless(vrfy_string(\$F{'fname'})) {
      $error{missing_flds} .= 'First Name,  ';
    }
    unless(vrfy_string(\$F{'lname'})) {
      $error{missing_flds} .= 'Last Name,  ';
    }
    unless(vrfy_string(\$F{'hphone'})) {
      $error{missing_flds} .= 'Home Telephone,  ';
    }
    unless(vrfy_string(\$F{'addr1'})) {
      $error{missing_flds} .= 'Street Address,  ';
    }
    unless(vrfy_string(\$F{'city'})) {
      $error{missing_flds} .= 'City,  ';
    }
    unless(vrfy_string(\$F{'state'})) {
      $error{missing_flds} .= 'State,  ';
    }
    unless(vrfy_int(\$F{'zip'})) {
      $error{missing_flds} .= 'Zip,  ';
    }
    unless(vrfy_string(\$F{'email'})) {
      $error{missing_flds} .= 'Email Address,  ';
    }
    unless(vrfy_string(\$F{'dob'})) {
      $error{missing_flds} .= 'Date of Birth.';
    }
    
    if(%error) {
      $error{'caption'} = 'YOUR ENTRY COULD NOT BE SUBMITTED';
      show_signup(\%error);
    }
    else {
      # save image
      if(defined($fh)) {

      # stupid windows - this strips the path information from the filename for requests generated by Internet Exploder
		  if($filename =~ /\\/) {
			  my @tmp = split(/\\/,$filename);
			  $filename = pop(@tmp);
		  }
      
        debug('Filename = ' . $filename . '<br />');
        my $buffer;
        mkdir($C->photos_dir() . '/' . $contest) unless (-e $C->photos_dir() . '/' . $contest);
        my $file_out = $C->photos_dir() . '/' . $contest . '/' . $filename . '.' . $photo_ext;
        # Untaint the file name
    debug('Output File name = '. $file_out . '<br />');
    
        if ($file_out =~ /^([-\/\@\w.]+)$/) {
          $file_out = $1;
        } else {
          die "Bad data in file_out: " . $file_out;
        }
        open(IMAGEOUT,">$file_out") or die "Couldn't open $file_out for writing: $!\n";
        binmode(IMAGEOUT);
        flock(IMAGEOUT,LOCK_EX);
        while(read($fh,$buffer,1024)) {
          print IMAGEOUT $buffer;
        }
        flock(IMAGEOUT,LOCK_UN);
        close(IMAGEOUT);

        # now resize the image to a displayable web size and thumbnail files
        #debug('Creating web images...<br />');
        #create_webimages($file_out,$size_x,$size_y,$F{orientation});
        #debug('Back.....<br />');
        # Create a Thumbnail
        #create_thumbnail($file_out,$size_x,$size_y,$F{orientation});
        # delete the original file
        #unlink($file_out);
      }
      my $query = 'insert into entrant (c_id,f_name,l_name,h_phone,w_phone,add_1,add_2,city,state,zip,dob,e_ip,email,userdef_1,userdef_2) ' . '
                  values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
      my $remoteIP = $Q->remote_host();
      debug('requester IP = ' . $remoteIP . '<br />');
      my $fileSaveName = $filename . '.' . $photo_ext;
      my @params = (2,$F{fname},$F{lname},$F{hphone},$F{wphone},$F{addr1},$F{addr2},$F{city},$F{state},$F{zip},$F{dob},$remoteIP,$F{email},$fileSaveName,0);
      $sth = $C->db_query($query,\@params);
      $sth->finish();
      
      # Send an email message to radio station letting them know of a new entry
      open(MAIL, "|$SENDMAIL -t") or croak "Failed to create new mail: $!\n";
      print MAIL <<_MESSAGE_;
From: Channel 9-5-Q <webmaster\@95q.fm>
To: $NOTICE_ADDR
Subject: Rear of the Year Entry Notification

Yo Ricky,

Channel-9-5-Q has another Rear of the Year to review.  Check out http://www.95q.fm/contests/private/review_roty.php

Thanks,
Channel-9-5-Q FM

_MESSAGE_
  close(MAIL);
      
      show_success();
    }
  }
}  
    
#------------------------------------------------------------------------------
# Create an orientation-based webimage and thumbnail for a new photo
# Change History
# 1. 03.09.2006:  Initial Version - jarnold
#------------------------------------------------------------------------------
sub create_webimages {
  my ($file_out,$x,$y,$orientation) = @_;
  debug('Pic Width: ' . $x . '  Pic Height = ' . $y . '<br />');
  debug((join " ", keys %Imager::formats) . '<br />');
  # I know its a hack but I just want to pass this routine the path+filename
  # Who wrote this?
  my @tmp = split(/\//,$file_out);
  my $file = pop(@tmp);
  my $dir = join("/",@tmp);

  my ($ext) = $file =~ /\.(jpg|gif|png|bmp)$/;
  my $format = $ext;
  &debug("File Extension = " . $ext . "<br>");
  #if ($format eq 'jpg') { $format = 'jpeg' }
  $file =~ s/\.$ext//;
  
  mkdir($dir) unless (-e $dir);
  
  # Copy the original and work only on the web file.
  copy($file_out,"$dir/${file}_web.$ext") or die "Couldn't copy $file_out to $dir/${file}_web.$ext: $!\n";
  copy($file_out,"$dir/${file}_thumb.$ext") or die "Couldn't copy $file_out to $dir/${file}_thumb.$ext: $!\n";
  
  ## Get the max thumb x and y for the web image file based on image orientation 
  ## Commented out until issue can be resolved with 1 and 1.  Am going to use manual resizing until then.
  #my $max_x;
  #my $max_y;
  #if ($orientation eq 'vert') {
  #  $max_x = $C->v_max_constr_width();
  #  $max_y = $C->v_max_constr_height();
  #} else {
  #  $max_x = $C->h_max_constr_width();
  #  $max_y = $C->h_max_constr_height();
  #}
  #debug('Max X:  ' . $max_x . '  Max Y:  ' . $max_y . '<br />');
  
  #my $image = Imager->new();
  #my $newImage = Imager->new();
  #if($x > $max_x || $y > $max_y) {
    # Read the image from the file into $image
  #  $image->read(file=>"$dir/${file}_web.$ext") or die "Cannot Read Image File:   " . $image->errstr();
    # create a scaled copy of the image
  #  if ($orientation eq 'vert') {
  #    $newImage = $image->scale(xpixels=>$max_x,ypixels=>$max_y,type=>'min');
  #  } else {
  #    $newImage = $image->scaleX(pixels=>$max_x);
  #    $newImage = $newImage->scaleY(pixels=>$max_y);
  #  }
  #  $newImage->write(file=>"$dir/${file}_web.$ext",$ext) or die "Cannot Write Image File:  " . $newImage->errstr;
  #}
  
  # Now do the thumbnail
  #if ($orientation eq 'vert') {
  #  $max_x = $C->v_thumb_width();
  #  $max_y = $C->v_thumb_height();
  #} else {
  #  $max_x = $C->h_thumb_width();
  #  $max_y = $C->h_thumb_height();
  #}
  
  #if($x > $max_x || $y > $max_y) {
    # Read the image from the file into $image
  #  $image->read(file=>"$dir/${file}_thumb.$ext",type=>$format) or die "Cannot Read Image File:   " . $image->errstr();
    # create a scaled copy of the image
  #  if ($orientation eq 'vert') {
  #    $newImage = $image->scale(xpixels=>$max_x,ypixels=>$max_y,type=>'min');
  #  } else {
  #    $newImage = $image->scaleX(pixels=>$max_x);
  #    $newImage = $newImage->scaleY(pixels=>$max_y);
  #  }
  # $newImage->write(file=>"$dir/${file}_thumb.$ext",$ext) or die "Cannot Write Image File:  " . $newImage->errstr;
  #}
}

######################################################################
sub debug_init {
  $DEBUG_INIT = 1;
  print $Q->header(-type=>'text/html');
}

sub debug {
  return unless ($DEBUG);
  if (!$DEBUG_INIT) {
    &debug_init();
  }
  print @_;
} 

1;
